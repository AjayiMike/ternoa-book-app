import clsx from "clsx";
import type { NextPage } from "next";
import Head from "next/head";
import { Fragment, MouseEvent, useCallback, useEffect, useState } from "react";
import Book from "../components/Book";
import DeleteModal from "../components/DeleteModal";
import { Book as BookType } from "../types/apiData";
import { toast } from 'react-toastify';

// ipfs gateway:: https://gateway.ipfs.io/

interface Props {
    books: BookType[]
}

const Home: NextPage<Props> = ({books}) => {
    const tabs = {
        myBooks: "myBooks",
        allBooks: "allbooks",
    };
    const [bookState, setBookState] = useState(books);
    const [activeTab, setActiveTab] = useState(tabs.allBooks);
    const [idTobeDeleted, setIdTobeDeleted] = useState<string | null>(null)
    const [bookTitleToBeDeleted, setBookTitleToBeDeleted] = useState<string | null>(null)

    useEffect(() => {
      if(!idTobeDeleted)
      return setBookTitleToBeDeleted(null)

      const bookToBeDeleted = books.find(book => book._id === idTobeDeleted);
      setBookTitleToBeDeleted(() => bookToBeDeleted!.title)
    }, [idTobeDeleted])


    const deleteBook = useCallback(async () => {
        if(!idTobeDeleted) return;
        
        try {
            const deletedRes = await fetch("/api/books/delete", {
                method: "DELETE",
                body: JSON.stringify({id: idTobeDeleted})
            })            
    
            if(deletedRes.status !== 200)
            return toast("something went wrong! Please try again")
            const filteredBooks = bookState.filter(book => book._id !== idTobeDeleted)
            setBookState(() => filteredBooks)
            setIdTobeDeleted(() => null);
            setBookTitleToBeDeleted(() => null)
            toast(`sucessfully deleted the book titled ${bookTitleToBeDeleted}`)
        } catch (error) {
            console.error("error deleting book: ", error);
            toast("something went wrong! Please try again")
        }
        
        
    }, [idTobeDeleted, bookTitleToBeDeleted])    

    return (
        <Fragment>
            <Head>
                <title>Books</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className="min-h-fit container mx-auto mt-12 px-4 sm:px-0">
                <div className="flex gap-6 border-b-2">
                    <button
                        onClick={() => setActiveTab(tabs.allBooks)}
                        id="allbooks"
                        className={clsx({
                            "border-b-4 border-black":
                                activeTab === tabs.allBooks,
                        })}
                    >
                        All books
                    </button>
                    <button
                        onClick={() => setActiveTab(tabs.myBooks)}
                        id="allbooks"
                        className={clsx({
                            "border-b-4 border-black":
                                activeTab === tabs.myBooks,
                        })}
                    >
                        My books
                    </button>
                </div>
                <div className="grid gap-4 md:grid-cols-2 mt-8 mb-16">
                    {
                        bookState.length ? bookState.map((book, index) => <Book key = {index} {...book} onDeleteClick = {setIdTobeDeleted} />) : <p>No Books to display</p>
                    }
                </div>
            </main>

            <DeleteModal
                open = {!!idTobeDeleted && !!bookTitleToBeDeleted}
                onClose = {() => setIdTobeDeleted(null)}
                label = {"delete confirmation"}
                bookTitle = {bookTitleToBeDeleted}
                deleteHandler = {deleteBook}
            />
        </Fragment>
    );
};

export const getServerSideProps = async (context: any) => {
    const host = context.req.headers.host;
    const booksEndpoint = host.startsWith('localhost') || host.startsWith('192') ? `http://${host}/api/books` : `https://${host}/api/books`;
    const res = await fetch(booksEndpoint);
    const parsedResponse = await res.json();
    
    return {props: {books: parsedResponse.books}}
}

export default Home;
